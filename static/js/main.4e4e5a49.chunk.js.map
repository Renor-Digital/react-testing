{"version":3,"sources":["logo.svg","components/card/card.component.js","components/card-list/card-list.component.js","components/search-box/search-box.component.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","Cardlist","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2RAAe,I,wBCGFA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,mCAAML,EAAMI,QAAQE,KAApB,OACA,mCAAMN,EAAMI,QAAQG,aCHfC,EAAW,SAAAR,GAAK,OAC3B,qBAAKC,UAAU,YAAf,SACID,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACpB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCHlBM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC6CHG,E,kDA/Cb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CAEbR,SAAU,GACVS,YAAa,IAND,E,qDAUZ,WAAqB,IAAD,OAClBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACf,SAAUc,S,oBAG3C,WAAU,IAAD,SAC0BE,KAAKR,MAA/BR,EADA,EACAA,SAAUS,EADV,EACUA,YACXQ,EAAmBjB,EAASkB,QAAO,SAAAvB,GAAO,OAC/CA,EAAQE,KAAKsB,cAAcC,SAASX,EAAYU,kBAEpD,OACM,sBAAK3B,UAAU,MAAf,UACA,yCAEA,cAAC,EAAD,CACEW,YAAY,wBACZC,aACE,SAAAiB,GAAC,OACC,EAAKN,SAAS,CAAEN,YAAaY,EAAEC,OAAOC,WAQ5C,cAAC,EAAD,CAAUvB,SAAUiB,W,GAtCVO,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4e4e5a49.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport './card.styles.css';\n\nexport const Card = props => (\n    <div className='card-container'>\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set3&size=180x180`} />\n        <h1> {props.monster.name} </h1>\n        <h3> {props.monster.email}</h3>\n        </div>\n\n);","import React from 'react';\nimport './card-list.styles.css';\nimport { Card } from '../card/card.component';\n\nexport const Cardlist = props => (\n  <div className='card-list'>\n     {props.monsters.map(monster => (\n            <Card key={monster.id} monster={monster} />\n            \n          )) } \n          </div>\n);","import React from 'react';\n\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) =>  (\n    <input \n        className='search' \n        type='search' \n        placeholder={placeholder }\n        onChange={handleChange}\n     />\n\n);","import logo from './logo.svg';\nimport './App.css';\nimport { Component } from 'react';\nimport {Cardlist} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor() {\n    super();\n    \n    this.state = {\n\n    monsters: [],\n    searchField: ''\n    };\n    }\n\n    componentDidMount() {\n      fetch('https://jsonplaceholder.typicode.com/users') \n      .then(response => response.json())\n      .then(users => this.setState({monsters: users}));\n    }\n\n   render() {\n     const {monsters, searchField } = this.state;\n     const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n     )\n  return (\n        <div className='App'>\n        <h1>Rolodex</h1>\n        \n        <SearchBox \n          placeholder='zoek monsters of niet'\n          handleChange={\n            e => \n              this.setState({ searchField: e.target.value })\n            }\n        />\n\n\n       \n       \n        \n        <Cardlist monsters={filteredMonsters}> \n       </Cardlist>\n\n       \n          \n          </div>\n);\n   }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}